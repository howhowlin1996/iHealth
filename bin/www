#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ihealth:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const SocketServer = require('ws').Server;
const SocketIdGroup=[];
const clientGroup=[];
//const URLSearchParams = require('url').URLSearchParams;

const PORT = process.env.VideoChatPort //指定 port


//將 express 交給 SocketServer 開啟 WebSocket 的服務
const wss = new SocketServer({ server })
//當有 client 連線成功時
wss.on('connection', (ws,req) => {
  //console.log( wss.clients);
  // 當收到client消息時
  //console.log(req.url.replace("/?token=",""));
    let id=parseInt(req.url.replace("/?token=",""));
    let socketPos=SocketIdGroup.indexOf(id);
    //console.log(socketPos);
    if(socketPos===-1){
      let client=[];
      client.push(ws);
      clientGroup.push(client);
      //console.log(clientGroup,"hahaha");
      SocketIdGroup.push(id);
      socketPos=clientGroup.length-1;
    }
    else{
        
        clientGroup[socketPos].push(ws);
    }

  //ws.send("連線成功"+id+"\n"+"在線人數: "+clientGroup[socketPos].length);
  ws.on('message', data => {
    data = data.toString()  
    //let msg=JSON.parse(data);
    //console.log(msg['type']);
    //ws.send(msg["txt"]);

    clientGroup[socketPos].forEach(client => {
      //console.log(data);
      if(client!=ws)client.send(data)  // 發送至每個 client
    })
    
    
  })
  ws.on('close', () => {
    clientGroup[socketPos].forEach(client => {
       let data={'state':'end'}
      if(client!=ws)client.send(JSON.stringify(data))  // 發送至每個 client
    })
    let id=clientGroup[socketPos].indexOf(ws);
    clientGroup[socketPos].splice(id,1);
    console.log(clientGroup[socketPos].length);
    console.log('Close connected')
    
    
  })
  
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
